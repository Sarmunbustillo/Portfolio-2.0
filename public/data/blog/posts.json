{
    "posts": [
        {
            "id": "ts_1",
            "headline": "Typescript Series - Pick Utility Type",
            "text": "Let's break down and explore how the Pick Utility Type works under the hood.",
            "link": "https://dev.to/sarmunbustillo/detect-when-an-element-gets-wrapped-flexbox-grid-f96",
            "external": true
        },
        {
            "id": "ts_2",
            "headline": "Typescript Series - Readonly Utility Type",
            "text": "The Readonly Utility Type can be very handy, let's see how we would implement it.",
            "link": "https://dev.to/sarmunbustillo/detect-when-an-element-gets-wrapped-flexbox-grid-f96",
            "external": true
        },

        {
            "id": "ts_3",
            "headline": "Typescript Series - Tuple to Object",
            "text": "Let's create a custom Type in order to convert a Tuple into Object.",
            "link": "https://dev.to/sarmunbustillo/typescript-series-tuple-to-object-1dl6",
            "external": true
        },

        {
            "id": "blog_1",
            "headline": "Detect when an element gets wrapped (Flexbox , Grid)",
            "text": "Let's say we have a parent container (flex or grid) that contains items that will wrap when they don't fit in the same row at different screen sizes.",
            "link": "https://dev.to/sarmunbustillo/detect-when-an-element-gets-wrapped-flexbox-grid-f96",
            "external": true
        },
        {
            "id": "blog_2",
            "headline": "Reusable Parallax Effect With CSS Variables",
            "text": "CSS variables offers us a very neat way to share information between CSS and JavaScript. The perk of connecting these two with CSS variables is that we can access them and modify them in CSS and in JS at any time.",
            "link": "https://dev.to/sarmunbustillo/reusable-parallax-effect-with-css-variables-79d",
            "external": true
        },
        {
            "id": "blog_3",
            "headline": "Custom double range slider",
            "text": "o create our custom slider we will make use of the native input type range, well, two of them. The idea in a nutshell is to hide the inputs and set / update visually our custom slider based on the values of those inputs.",
            "link": "https://dev.to/sarmunbustillo/custom-double-range-slider-3h8a",
            "external": true
        },
        {
            "id": "blog_4",
            "headline": "Custom animated Counter",
            "text": "A counter that can be easily customized and animated",
            "link": "https://dev.to/sarmunbustillo/animated-counter-fjo",
            "external": true
        }
    ]
}
